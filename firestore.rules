rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document with ID 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a profile document with ID 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their profile document with ID 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile document with ID 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == resource.data.userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Disallow listing all users

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to daily logs for each user.
     * @path /users/{userId}/dailyLogs/{logId}
     * @allow (create) - User with UID 'user123' can create a daily log with ID '2024-01-01' under their user ID.
     * @deny (create) - User with UID 'user456' cannot create a daily log under user ID 'user123'.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, and delete their own daily logs.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot read, list, update, or delete daily logs under user ID 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/dailyLogs/{logId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == resource.data.userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to the global foods collection.
     * @path /foods/{foodId}
     * @allow (get, list) - Any user can read and list food items.
     * @deny (create, update, delete) - No user can create, update, or delete food items through the client.
     * @principle Allows public read access but restricts write access to prevent unauthorized modifications.
     */
    match /foods/{foodId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user feedback submissions.
     * @path /feedback/{feedbackId}
     * @allow (get, list) - Any user can read feedback submissions.
     * @allow (create) - User with UID 'user123' can create feedback with userId 'user123'.
     * @deny (create) - User with UID 'user456' cannot create feedback with userId 'user123'.
     * @allow (update, delete) - No user can update or delete existing feedback.
     * @principle Allows public read access but restricts writes to owner-only for creation and denies updates/deletions.
     */
    match /feedback/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}