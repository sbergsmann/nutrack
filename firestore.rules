/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and daily logs,
 * while allowing public read access to the 'foods' collection. User feedback is also subject to
 * owner-only restrictions. The rules prioritize security and data integrity.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/dailyLogs/{logId}: Stores daily logs for each user, where logId is the date.
 * - /foods/{foodId}: Global collection of all unique food items.
 * - /feedback/{feedbackId}: Stores user feedback submissions.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and daily logs.
 * - Listing of all users is disallowed.
 * - The 'foods' collection is publicly readable, but only an admin (not yet implemented) can create, update, or delete food items.
 * - User feedback can only be created by the user and not updated/deleted.
 *
 * Denormalization for Authorization:
 *  - DailyLog documents contain a 'userId' field to allow easy verification of ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - User can read, update, and delete their own profile.
     * @deny (create) - User cannot create a profile with a userId that doesn't match their auth.uid.
     * @deny (update, delete) - User cannot modify or delete another user's profile.
     * @deny (list) - Listing all users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily log documents for each user.
     * @path /users/{userId}/dailyLogs/{logId}
     * @allow (create) - User can create a daily log in their own user directory.
     * @allow (get, update, delete) - User can read, update, and delete their own daily logs.
     * @deny (create) - User cannot create a daily log in another user's directory.
     * @deny (update, delete) - User cannot modify or delete another user's daily logs.
     * @deny (list) - User can list their own logs.
     * @principle Enforces document ownership for daily logs.
     */
    match /users/{userId}/dailyLogs/{logId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global food items collection.
     * @path /foods/{foodId}
     * @allow (get, list) - Anyone can read the food items.
     * @deny (create, update, delete) - Only admin can create, update, and delete food items.
     * @principle Allows public read access but restricts write access to admins (not yet implemented).
     */
    match /foods/{foodId} {
       allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin-only access
    }

    /**
     * @description Controls access to user feedback documents.
     * @path /feedback/{feedbackId}
     * @allow (create) - User can create feedback.
     * @deny (get, list, update, delete) - Users cannot read, list, update, or delete existing feedback.
     * @principle Allows users to submit feedback but restricts access to it.
     */
    match /feedback/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }
  }
}