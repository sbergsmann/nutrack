/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data and allows public read access to the 'foods' collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only by the user themselves.
 * - /users/{userId}/dailyLogs/{logId}: Stores daily logs for each user. Accessible only by the user themselves. The logId is the date in YYYY-MM-DD format.
 * - /foods/{foodId}: Global collection of all unique food items. Publicly readable, but only the application can create, update, or delete them.
 * - /feedback/{feedbackId}: Stores user feedback submissions. Accessible only by the user themselves.
 *
 * Key Security Decisions:
 * - Users can only access their own profile and daily logs.
 * - Listing of all users is disallowed.
 * - The 'foods' collection is publicly readable to allow clients to fetch food data without authentication, but write operations are denied to client.
 * - All write operations require user authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with uid 'user_abc' can create their own profile with matching uid.
     * @allow (get, update, delete) - User with uid 'user_abc' can get, update, and delete their own profile.
     * @deny (create) - User with uid 'user_xyz' cannot create a profile with userId 'user_abc'.
     * @deny (get, update, delete) - User with uid 'user_xyz' cannot get, update, and delete the profile of userId 'user_abc'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure daily logs for each user. Only the authenticated user can read and write their own logs.
     * @path /users/{userId}/dailyLogs/{logId}
     * @allow (create) - User with uid 'user_abc' can create a daily log under their profile.
     * @allow (get, update, delete) - User with uid 'user_abc' can get, update, and delete their own daily logs.
     * @deny (create) - User with uid 'user_xyz' cannot create a daily log for user 'user_abc'.
     * @deny (get, update, delete) - User with uid 'user_xyz' cannot get, update, and delete the daily logs of user 'user_abc'.
     * @principle Enforces document ownership for all operations on user user daily logs.
     */
    match /users/{userId}/dailyLogs/{logId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Publicly readable collection of food items, write operations restricted to the application.
     * @path /foods/{foodId}
     * @allow (get, list) - Any user (signed in or not) can read the food items.
     * @deny (create, update, delete) - No user can create, update, or delete food items.
     * @principle Allows public read access for the 'foods' collection, restricts write access to application.
     */
    match /foods/{foodId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure user feedback submissions. Only the authenticated user can read and write their own feedback.
     * @path /feedback/{feedbackId}
     * @allow (create) - User with uid 'user_abc' can create feedback with matching userId.
     * @allow (get, update, delete) - User with uid 'user_abc' can get, update, and delete their own feedback.
     * @deny (create) - User with uid 'user_xyz' cannot create feedback with userId 'user_abc'.
     * @deny (get, update, delete) - User with uid 'user_xyz' cannot get, update, and delete the feedback of user 'user_abc'.
     * @principle Enforces document ownership for all operations on user feedback.
     */
    match /feedback/{feedbackId} {
      allow get: if isFeedbackOwner(feedbackId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isFeedbackOwner(feedbackId);
      allow delete: if isFeedbackOwner(feedbackId);
    }
  }

  // Helper function to determine if the current user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId && isSignedIn();
  }

    // Helper function to determine if the current user is the owner of the resource and the resource exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  // Helper function to check if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

    // Helper function to determine if the current user is the owner of the feedback resource.
  function isFeedbackOwner(feedbackId) {
    return isSignedIn() && request.auth.uid == resource.data.userId;
  }
}