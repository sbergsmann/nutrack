/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and daily logs.
 * Public read access is granted to the /foods collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/dailyLogs/{logId}: Stores daily logs for each user. The logId is the date in YYYY-MM-DD format.
 * - /foods/{foodId}: Global collection of all unique food items.
 * - /feedback/{feedbackId}: Stores user feedback submissions.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and daily logs.
 * - The foods collection is publicly readable.
 * - Feedback submissions are publicly writable.
 * - User listing is disallowed.
 *
 * Denormalization for Authorization:
 * - Daily logs contain the `id` field, which is the user ID, to enable ownership checks within the /dailyLogs collection.
 *
 * Structural Segregation:
 * - Private user data (profile, daily logs) is stored under the /users/{userId} path, separate from public data (/foods).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     *   request.auth.uid == 'user123' and request.resource.data.uid == 'user123'
     * @allow (get) User with UID 'user123' can read their profile.
     *   request.auth.uid == 'user123'
     * @allow (update) User with UID 'user123' can update their profile.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with UID 'user123' can delete their profile.
     *   request.auth.uid == 'user123'
     * @deny User with UID 'user456' cannot access user profile 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Allows users to read and write their own daily log data.
     * @path /users/{userId}/dailyLogs/{logId}
     * @allow (create) User with UID 'user123' can create a daily log.
     *   request.auth.uid == 'user123' and request.resource.data.id == 'user123'
     * @allow (get) User with UID 'user123' can read their daily log.
     *   request.auth.uid == 'user123'
     * @allow (update) User with UID 'user123' can update their daily log.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with UID 'user123' can delete their daily log.
     *   request.auth.uid == 'user123'
     * @deny User with UID 'user456' cannot access daily log of user 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/dailyLogs/{logId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.id == userId;
        allow update: if isOwner(userId) && resource.data.id == userId;
        allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows anyone to read the food items, but only authorized users to create, update, or delete them.
     * @path /foods/{foodId}
     * @allow (get) Any user can get a food item.
     *   request.auth != null
     * @allow (list) Any user can list food items.
     *   request.auth != null
     * @deny (create) Any user cannot create a food item
     *   request.auth != null
     * @deny (update) Any user cannot update a food item
     *   request.auth != null
     *  @deny (delete) Any user cannot delete a food item
     *   request.auth != null
     * @principle Public read access with owner-only writes.
     */
    match /foods/{foodId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to create feedback, but only authorized users to read, update, or delete them.
     * @path /feedback/{feedbackId}
     * @allow (create) Any user can create a feedback item.
     *   request.auth != null
     * @deny (get) Any user cannot get a feedback item.
     *   request.auth != null
     * @deny (list) Any user cannot list feedback items.
     *   request.auth != null
     * @deny (update) Any user cannot update a feedback item
     *   request.auth != null
     *  @deny (delete) Any user cannot delete a feedback item
     *   request.auth != null
     */
    match /feedback/{feedbackId} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}