/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and daily logs.
 *  Global data (foods) are publicly readable but write-protected. User feedback can be submitted by anyone.
 * @data_structure
 *  /users/{userId}: Stores user profiles.
 *  /users/{userId}/dailyLogs/{logId}: Stores daily logs for each user.
 *  /foods/{foodId}: Stores a global collection of food items.
 *  /feedback/{feedbackId}: Stores user feedback.
 * @key_security_decisions
 *  - Users can only read and write their own profile data and daily logs.
 *  - Listing of users is disallowed.
 *  - Foods are publicly readable but only writable by a server/admin (currently disabled in this prototype).
 *  - Anyone can submit feedback.
 * @denormalization_for_authorization None required in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile. The userId in the path must match the user's UID.
     * @allow (get, update, delete) Signed-in user accesses their own profile.
     * @deny (create) User attempts to create a profile with a mismatched userId.
     * @deny (get, update, delete) User attempts to access another user's profile.
     * @principle Enforces document ownership, preventing unauthorized access to user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to daily log documents within a user's profile.
     * @path /users/{userId}/dailyLogs/{logId}
     * @allow (create) Signed-in user creates a daily log under their own profile. The userId in the path must match the user's UID.
     * @allow (get, update, delete) Signed-in user accesses their own daily logs.
     * @deny (create) User attempts to create a daily log under another user's profile.
     * @deny (get, update, delete) User attempts to access another user's daily logs.
     * @principle Enforces document ownership, restricting access to a user's own daily log data.
     */
    match /users/{userId}/dailyLogs/{logId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to food documents in the global food collection.
     * @path /foods/{foodId}
     * @allow (get, list) Anyone can read the food data.
     * @deny (create, update, delete) No one can create, update, or delete food data via client; this is only done through back-end functions.
     * @principle Allows public read access to the global food collection while restricting write access.
     */
    match /foods/{foodId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure this with admin/service account access.
    }

    /**
     * @description Controls access to feedback documents.
     * @path /feedback/{feedbackId}
     * @allow (create) Any signed-in user can submit feedback.
     * @allow (get) Any signed-in user can get feedback.
     * @allow (list) Any signed-in user can list feedback.
     * @deny (update, delete) Only admins can update and delete feedback, preventing users from modifying or deleting feedback they didn't submit.
     * @principle Allows open feedback submission while restricting modification and deletion.
     */
    match /feedback/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // TODO: Secure this with admin/service account access.
    }
  }
}