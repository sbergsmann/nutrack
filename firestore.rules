/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and daily logs,
 * while allowing public read access to food items and open access to feedback submissions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user.
 * - /users/{userId}/dailyLogs/{logId}: Stores daily logs for each user, accessible only to the user.
 * - /foods/{foodId}: A global collection of food items, publicly readable.
 * - /feedback/{feedbackId}: Stores user feedback, open to all users.
 *
 * Key Security Decisions:
 * - User profiles and daily logs are strictly controlled by user ownership.
 * - Food items are publicly readable to facilitate easy access.
 * - Feedback submissions are open, but each submission must include the user's ID for context.
 *
 * Denormalization for Authorization:
 * - The 'DailyLog' entity requires the `id` field to match the `userId` path parameter to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'otherUser' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily logs for each user.
     * @path /users/{userId}/dailyLogs/{logId}
     * @allow (create) User with UID 'user123' can create a daily log.
     * @allow (get) User with UID 'user123' can read their daily log.
     * @allow (update) User with UID 'user123' can update their daily log.
     * @allow (delete) User with UID 'user123' can delete their daily log.
     * @deny (create) User with UID 'otherUser' cannot create a daily log for 'user123'.
     * @principle Enforces document ownership for daily logs.
     */
    match /users/{userId}/dailyLogs/{logId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.id == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global collection of food items.
     * @path /foods/{foodId}
     * @allow (get) Any user can read food items.
     * @allow (list) Any user can list food items.
     * @deny (create) No one can create food items through the client.
     * @deny (update) No one can update food items through the client.
     * @deny (delete) No one can delete food items through the client.
     * @principle Allows public read access to food items.
     */
    match /foods/{foodId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user feedback submissions.
     * @path /feedback/{feedbackId}
     * @allow (create) Any user can submit feedback.
     * @allow (get) Any user can read feedback.
     * @allow (list) Any user can list feedback.
     * @deny (update) No one can update feedback through the client.
     * @deny (delete) No one can delete feedback through the client.
     */
    match /feedback/{feedbackId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}