/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @Core Philosophy
 * This ruleset enforces a strict user-ownership model for user profiles and daily logs.
 * The 'foods' collection is publicly readable, but write access is restricted to authenticated users.
 *
 * @Data Structure
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /users/{userId}/dailyLogs/{logId}: Stores daily logs for each user, accessible only to the user themselves.
 *   The logId is the date in YYYY-MM-DD format.
 * - /foods/{foodId}: Global collection of food items. Readable by all, but create/update/delete are owner-only.
 *
 * @Key Security Decisions
 * - Users can only access their own profile data and daily logs.
 * - Listing of users is not allowed.
 * - Public read access is granted to the 'foods' collection.
 *
 * @Denormalization for Authorization
 * The 'dailyLog' documents MUST contain an 'id' field that matches the 'userId' in the path for proper authorization.
 * The 'foods' collection does not need denormalization because it allows public read access.
 *
 * @Structural Segregation
 * Private data (user profiles, daily logs) is stored under the /users/{userId} path, while public data (foods) resides in a top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their own profile.
     * @allow (get) User with uid 'user123' can read their own profile.
     * @allow (update) User with uid 'user123' can update their own profile.
     * @allow (delete) User with uid 'user123' can delete their own profile.
     * @deny (create) User with uid 'user456' cannot create a profile for user 'user123'.
     * @deny (get) User with uid 'user456' cannot read the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to daily log documents within a user's profile.
     * @path /users/{userId}/dailyLogs/{logId}
     * @allow (create) User with uid 'user123' can create a daily log in their profile.
     * @allow (get) User with uid 'user123' can read a daily log in their profile.
     * @allow (update) User with uid 'user123' can update a daily log in their profile.
     * @allow (delete) User with uid 'user123' can delete a daily log in their profile.
     * @deny (create) User with uid 'user456' cannot create a daily log for user 'user123'.
     * @deny (get) User with uid 'user456' cannot read a daily log from user 'user123'.
     * @principle Enforces document ownership and validates relational integrity.
     */
    match /users/{userId}/dailyLogs/{logId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to the global food items collection.
     * @path /foods/{foodId}
     * @allow (get) Any user can read any food item.
     * @allow (list) Any user can list food items.
     * @allow (create) Authenticated user can create food items.
     * @allow (update) Authenticated user can update food items.
     * @allow (delete) Authenticated user can delete food items.
     * @principle Allows public read access with owner-only writes.
     */
    match /foods/{foodId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}