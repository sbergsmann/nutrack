/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles and their daily logs.
 *  Global food items are publicly readable, but only authenticated users can create, update, or delete them.
 *  User feedback submissions are open to all authenticated users.
 * @data_structure
 *  - /users/{userId}: Stores user profiles.
 *  - /users/{userId}/dailyLogs/{logId}: Stores daily logs for each user.
 *  - /foods/{foodId}: Global collection of food items.
 *  - /feedback/{feedbackId}: Stores user feedback.
 * @key_security_decisions
 *  - Users can only access their own profile data and daily logs.
 *  - Listing of users is disallowed.
 *  - Global food items are publicly readable.
 *  - Feedback can be submitted by any authenticated user.
 * @denormalization_for_authorization
 *  - Daily logs have a 'userId' field for ownership validation.
 *  - Feedback documents have a 'userId' field indicating the submitter.
 * @structural_segregation
 *  - Uses separate collections for user-specific data (dailyLogs) and public data (foods).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *  request.auth.uid == 'user123' and request.resource.data.uid == 'user123'
     * @allow (get) User with ID 'user123' can get their own profile.
     *  request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their own profile.
     *  request.auth.uid == 'user123' and resource.data.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their own profile.
     *  request.auth.uid == 'user123' and resource.data.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *  request.auth.uid == 'user456' and request.resource.data.uid == 'user123'
     * @deny (get) User with ID 'user456' cannot get the profile of 'user123'.
     *  request.auth.uid == 'user456'
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     *  request.auth.uid == 'user456'
     * @deny (delete) User with ID 'user456' cannot delete the profile of 'user123'.
     *  request.auth.uid == 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily logs for each user.
     * @path /users/{userId}/dailyLogs/{logId}
     * @allow (create) User with ID 'user123' can create a daily log.
     *  request.auth.uid == 'user123' and request.resource.data.userId == 'user123'
     * @allow (get) User with ID 'user123' can get their own daily log.
     *  request.auth.uid == 'user123' and resource.data.userId == 'user123'
     * @allow (update) User with ID 'user123' can update their own daily log.
     *  request.auth.uid == 'user123' and resource.data.userId == 'user123'
     * @allow (delete) User with ID 'user123' can delete their own daily log.
     *  request.auth.uid == 'user123' and resource.data.userId == 'user123'
     * @deny (create) User with ID 'user456' cannot create a daily log for 'user123'.
     *  request.auth.uid == 'user456' and request.resource.data.userId == 'user123'
     * @deny (get) User with ID 'user456' cannot get the daily log of 'user123'.
     *  request.auth.uid == 'user456'
     * @deny (update) User with ID 'user456' cannot update the daily log of 'user123'.
     *  request.auth.uid == 'user456'
     * @deny (delete) User with ID 'user456' cannot delete the daily log of 'user123'.
     *  request.auth.uid == 'user456'
     * @principle Enforces document ownership and relational integrity for writes.
     */
    match /users/{userId}/dailyLogs/{logId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to global food items.
     * @path /foods/{foodId}
     * @allow (get) Any user can read food items.
     *  true
     * @allow (list) Any user can list food items.
     *  true
     * @allow (create) Any authenticated user can create food items.
     *  request.auth != null
     * @allow (update) Any authenticated user can update food items.
     *  request.auth != null
     * @allow (delete) Any authenticated user can delete food items.
     *  request.auth != null
     * @principle Allows public read access but restricts write access to authenticated users.
     */
    match /foods/{foodId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to user feedback submissions.
     * @path /feedback/{feedbackId}
     * @allow (create) Any authenticated user can submit feedback.
     *  request.auth != null and request.resource.data.userId == request.auth.uid
     * @allow (get) Any authenticated user can get a feedback.
     *  request.auth != null and request.resource.data.userId == request.auth.uid
     * @allow (update) No one can update a feedback.
     *  false
     * @allow (delete) No one can delete a feedback.
     *  false
     * @principle Allows any authenticated user to submit feedback.
     */
    match /feedback/{feedbackId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}